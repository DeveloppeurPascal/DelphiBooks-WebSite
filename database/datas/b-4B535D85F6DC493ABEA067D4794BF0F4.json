{
"id":135,
"guid":"4B535D85F6DC493ABEA067D4794BF0F4",
"pagename":"Code-better-in-Delphi.html",
"datalevel":6,
"dataversion":1,
"name":"Code better in Delphi",
"lang":"en",
"pubdate":"20230710",
"website":"https:\/\/learndelphi.tv\/codebetter",
"authors":[
{
"id":16,
"guid":"D82AFCB8DA18EE118C5C32A5A9F17050",
"pagename":"Alister-Christie.html",
"datalevel":6,
"dataversion":1}],
"publishers":[
],
"descriptions":[
{
"guid":"C67D352B34B74112A2B3BD709DACB293",
"pagename":"",
"datalevel":3,
"dataversion":1,
"lang":"en",
"text":"<p>It\u2019s back, it\u2019s bigger, it\u2019s better, it\u2019s the sequel to Alsiter Christie's previous book, it\u2019s Code Better in Delphi.  <\/p>\r\n<p>After my last book, you can write code much faster, but without the skills to write code better, you might just end up being a highly efficient spaghetti coding machine.  So stop writing that tightly coupled singleton full of duplicated code, and start reading this book.<\/p>\r\n<p>This time, rather than looking at how fast and productive you can be, we look at quality and maintainability.<\/p>\r\n<p>In this book, you\u2019ll be introduced to a variety of ways you can make your code better<\/p>\r\n<p>How DRY is that code you just wrote?<br>\r\nIs that class SOLID or crumblier than a very crumbly cookie?<br>\r\nWill Refactoring improve the quality of your code?<br>\r\nAre you reinventing the wheel, or should you use try Patterns?<br>\r\nWill testing drive you mad?<br>\r\nAre your bugs buggier than a giraffe stage beetle?<br>\r\nDo you have a handle on those dependencies?<br>\r\nAre your versions under control?<br>\r\nWhat to do before disaster strikes or the zombie horde arrives?<br>\r\nAre you Agile, or are you about to go over a waterfall?<br>\r\nHow do you calculate the Bus number for your project?<br>\r\nFind out the answer to these and many more questions in this book.<\/p>\r\n<p>But wait, there\u2019s more\u2026<\/p>\r\n<p>Plugins and Tools that<\/p>\r\n<p>Find areas of your code that might need improving.<br>\r\nTell you about Complex areas of code you can simplify.<br>\r\nWhere you are making common coding mistakes.<br>\r\nHelp remove redundancy and orphaned code.<br>\r\nLet you know when code is leaker than a knitted canoe.<br>\r\nAutomate your testing<\/p>"}],
"tocs":[
{
"guid":"CBDA66A6635D40A6B36D35E57A4D9A8D",
"pagename":"",
"datalevel":3,
"dataversion":1,
"lang":"en",
"text":"<ul>\r\n<li>Copyright 1<\/li>\r\n<li>Table of Contents 1<\/li>\r\n<li>Dedication 8<\/li>\r\n<li>Foreword 9<\/li>\r\n<li>Preface 15<\/li>\r\n<li>Acknowledgements 15<\/li>\r\n<li>Introduction 16\r\n<ul>\r\n<li>Conventions Used in this Book 17<\/li>\r\n<li>Scope 17<\/li>\r\n<li>More Information 17<\/li>\r\n<li>Code Samples 17<\/li>\r\n<li>Sections in this Book 18<\/li>\r\n<\/ul>\r\n<\/li>\r\n<li>begin 18<\/li>\r\n<li>Make Code Maintainable 18\r\n<ul>\r\n<li>The Enterprise Development Merry-Go-Round 19<\/li>\r\n<li>Write Code for Maintainability 21<\/li>\r\n<li>Write Code for Scalability 21<\/li>\r\n<li>Write Code for Reliability 22<\/li>\r\n<\/ul>\r\n<\/li>\r\n<li>PART ONE - CODE 23<\/li>\r\n<li>Small Coding Tips 24\r\n<ul>\r\n<li>Evil Comments 24\r\n<ul>\r\n<li>Don\u2019t Leave Commented-Out Code in Your Application 25<\/li>\r\n<\/ul>\r\n<\/li>\r\n<li>Make Your Code More Stylish 26\r\n<ul>\r\n<li>Let CTRL+D Be Your Friend 26<\/li>\r\n<\/ul>\r\n<\/li>\r\n<li>Use a Good Naming Convention 28\r\n<ul>\r\n<li>Stop Prefixing Variables with Their Type 29<\/li>\r\n<li>Variables are Nouns, Methods Verbs 29<\/li>\r\n<\/ul>\r\n<\/li>\r\n<li>Parameters 30\r\n<ul>\r\n<li>Parameter Overload 30<\/li>\r\n<li>Parameter Sets 31<\/li>\r\n<li>By Reference or By Value 32<\/li>\r\n<\/ul>\r\n<\/li>\r\n<li>Side Effects 32<\/li>\r\n<li>Method Length - Size Really IS Important 34<\/li>\r\n<li>Ditch With 34<\/li>\r\n<li>FreeAndNil 36<\/li>\r\n<li>Global State 36<\/li>\r\n<li>Inject Your Dependencies 36\r\n<ul>\r\n<li>Further Learning 38<\/li>\r\n<\/ul>\r\n<\/li>\r\n<\/ul>\r\n<\/li>\r\n<li>DRY Your Code 38\r\n<ul>\r\n<li>When Not to DRY Your Code 39<\/li>\r\n<li>WET Code 39<\/li>\r\n<\/ul>\r\n<\/li>\r\n<li>Use SOLID Code 39\r\n<ul>\r\n<li>Single Responsibility 40<\/li>\r\n<li>Open-Closed 40<\/li>\r\n<li>Liskov Substitution 42<\/li>\r\n<li>Interface Segregation 43<\/li>\r\n<li>Dependency Inversion 43<\/li>\r\n<li>Further Learning 45<\/li>\r\n<\/ul>\r\n<\/li>\r\n<li>Use the Law of Demeter 45<\/li>\r\n<li>Refactoring 46\r\n<ul>\r\n<li>What is \u201Crefactoring\u201D? 46<\/li>\r\n<li>Malodourous Source 47\r\n<ul>\r\n<li>Further Learning 47<\/li>\r\n<\/ul>\r\n<\/li>\r\n<li>Specific Refactorings 47\r\n<ul>\r\n<li>Re-ordering Statements 47<\/li>\r\n<li>Rename Refactoring 47<\/li>\r\n<li>Automated Refactorings 49<\/li>\r\n<li>Extract Method 49<\/li>\r\n<li>Extract Method Object 51<\/li>\r\n<li>Split With 53<\/li>\r\n<li>Introduce Explaining Variable 54<\/li>\r\n<li>Summary 57<\/li>\r\n<\/ul>\r\n<\/li>\r\n<li>Further Learning 57<\/li>\r\n<\/ul>\r\n<\/li>\r\n<li>Design Patterns 57\r\n<ul>\r\n<li>The Observer Pattern 58<\/li>\r\n<li>Anti-Patterns 65\r\n<ul>\r\n<li>Redundant Code 66<\/li>\r\n<li>Language Features 66<\/li>\r\n<li>Bad Exception Blocks 66<\/li>\r\n<li>Use Guard Clauses Properly 67<\/li>\r\n<li>Premature Optimisation 68<\/li>\r\n<li>Architecture 68<\/li>\r\n<\/ul>\r\n<\/li>\r\n<li>Further Learning 68<\/li>\r\n<\/ul>\r\n<\/li>\r\n<li>PART TWO - THE RIGHT TOOL 70<\/li>\r\n<li>The Delphi IDE 71\r\n<ul>\r\n<li>Hints and Warnings 71\r\n<ul>\r\n<li>Have a Zero Hints and Warnings Policy 72<\/li>\r\n<li>Further Learning 73<\/li>\r\n<\/ul>\r\n<\/li>\r\n<li>Audits and Metrics 73<\/li>\r\n<li>Toxicity Metrics 77<\/li>\r\n<li>Help Insight 77<\/li>\r\n<\/ul>\r\n<\/li>\r\n<li>Third-Party Tools 81\r\n<ul>\r\n<li>External Tools 81\r\n<ul>\r\n<li>Source Monitor 81<\/li>\r\n<li>Pascal Analyzer 84<\/li>\r\n<\/ul>\r\n<\/li>\r\n<li>Libraries 87\r\n<ul>\r\n<li>FastMM4 87\r\n<ul>\r\n<li>Leak Detection 87<\/li>\r\n<li>Double Free 92<\/li>\r\n<li>Using a Freed Object 94<\/li>\r\n<li>Limit Usage to Debugging 95<\/li>\r\n<\/ul>\r\n<\/li>\r\n<\/ul>\r\n<\/li>\r\n<li>IDE Plugins 96\r\n<ul>\r\n<li>Pascal Expert 96<\/li>\r\n<li>FixInsight 97<\/li>\r\n<li>Beyond Compare 99<\/li>\r\n<li>TestInsight 101<\/li>\r\n<li>Model Maker Code Explorer 107<\/li>\r\n<li>Other Plugins 108<\/li>\r\n<\/ul>\r\n<\/li>\r\n<\/ul>\r\n<\/li>\r\n<li>PART THREE - WORKING WITH CODE 110<\/li>\r\n<li>Testing Your Application 111\r\n<ul>\r\n<li>Types of Testing 111\r\n<ul>\r\n<li>Functional Testing 111<\/li>\r\n<li>Integration Testing 112<\/li>\r\n<\/ul>\r\n<\/li>\r\n<\/ul>\r\n<\/li>\r\n<li>What are Unit Tests? 113\r\n<ul>\r\n<li>Test-Driven Development 113<\/li>\r\n<\/ul>\r\n<\/li>\r\n<li>What is Test-Driven Development? 113\r\n<ul>\r\n<li>Bowling Score Kata 114<\/li>\r\n<li>What\u2019s a Kata? 114<\/li>\r\n<li>What is a Coding Kata? 115<\/li>\r\n<li>Bowling Score Kata 115<\/li>\r\n<li>How to Score Ten-Pin Bowling 116<\/li>\r\n<li>And the Kata Begins\u2026 116\r\n<ul>\r\n<li>About the project 117<\/li>\r\n<li>The unit tests 117<\/li>\r\n<li>Gui Runner 129<\/li>\r\n<li>Further Learning 131<\/li>\r\n<\/ul>\r\n<\/li>\r\n<\/ul>\r\n<\/li>\r\n<li>Debugging 131\r\n<ul>\r\n<li>Debugging Basics 132\r\n<ul>\r\n<li>BreakPoints 132<\/li>\r\n<li>Baby-Steps 133<\/li>\r\n<\/ul>\r\n<\/li>\r\n<li>Instruction Pointer 135<\/li>\r\n<li>More Advanced Breakpoints 135<\/li>\r\n<li>Breakpoint Window 137<\/li>\r\n<li>Local Variables 137<\/li>\r\n<li>Call Stack 139<\/li>\r\n<li>Watch List 140<\/li>\r\n<li>Debug Inspector 143<\/li>\r\n<li>Evaluate\/Modify 145<\/li>\r\n<li>Threads 146<\/li>\r\n<li>Modules 148<\/li>\r\n<li>CPU Windows 149<\/li>\r\n<li>Using the Debugger: 150\r\n<ul>\r\n<li>Simultaneous Debugging 151<\/li>\r\n<li>Work Out the Pass Count 151<\/li>\r\n<li>Extreme Side Effects 152<\/li>\r\n<\/ul>\r\n<\/li>\r\n<li>Fantastic Bugs and Where to Find Them 154<\/li>\r\n<li>Logging 155<\/li>\r\n<li>Platform Assistant 156<\/li>\r\n<li>Writing Code to Make Debugging Easier 156<\/li>\r\n<li>Test Your Bugs 157<\/li>\r\n<li>Further Learning 157<\/li>\r\n<\/ul>\r\n<\/li>\r\n<li>Removing Dependencies 157\r\n<ul>\r\n<li>Dependencies Between units. 157<\/li>\r\n<li>Dependencies Between Classes 158<\/li>\r\n<\/ul>\r\n<\/li>\r\n<li>Dependency Injection 158\r\n<ul>\r\n<li>Three Types of Dependency Injection 159\r\n<ul>\r\n<li>Constructor Injection 160<\/li>\r\n<li>Property Injection 161<\/li>\r\n<li>Method Injection 162<\/li>\r\n<li>Interface Injection 162<\/li>\r\n<li>Further Learning 163<\/li>\r\n<\/ul>\r\n<\/li>\r\n<\/ul>\r\n<\/li>\r\n<li>Cleaning Up Uses Clauses 163\r\n<ul>\r\n<li>cnWizards Uses Cleaner 164<\/li>\r\n<li>Pascal Analyser Usage Report 167<\/li>\r\n<li>Orphaned Code 169<\/li>\r\n<li>Removing Public Methods and Globals 170<\/li>\r\n<li>Pascal Analyzer Code Reduction Report 173<\/li>\r\n<\/ul>\r\n<\/li>\r\n<li>Logging Example 173\r\n<ul>\r\n<li>Remove Global Variable by Constructor Injection 177<\/li>\r\n<li>Create an Interface 178<\/li>\r\n<li>A New Logger 180<\/li>\r\n<li>Multiple Loggers - Polymorphism to the Rescue 184<\/li>\r\n<li>Method Logging Made Simple 185<\/li>\r\n<li>Final Notes 188<\/li>\r\n<li>Further Learning 188<\/li>\r\n<\/ul>\r\n<\/li>\r\n<li>Settings Example 189\r\n<ul>\r\n<li>TVirtualInterface to the Rescue 190<\/li>\r\n<li>Descending from TVirtualInterface 191<\/li>\r\n<li>Introducing Attributes 196<\/li>\r\n<li>Further Learning 198<\/li>\r\n<\/ul>\r\n<\/li>\r\n<li>Working on Legacy Projects 198\r\n<ul>\r\n<li>Further Learning 200<\/li>\r\n<\/ul>\r\n<\/li>\r\n<li>PART FOUR - BEYOND DELPHI 201<\/li>\r\n<li>Version Control 202\r\n<ul>\r\n<li>What is version control? 202<\/li>\r\n<li>Repository 202\r\n<ul>\r\n<li>Update 202<\/li>\r\n<li>Merge 202<\/li>\r\n<li>Commit 203<\/li>\r\n<li>Branch 203<\/li>\r\n<\/ul>\r\n<\/li>\r\n<li>Subversion 203<\/li>\r\n<li>SVN Tutorial 204\r\n<ul>\r\n<li>Install a Server 204<\/li>\r\n<li>Install the Client 204<\/li>\r\n<li>Using SVN 204<\/li>\r\n<li>Checking Our Code In 207<\/li>\r\n<li>Making Our Second Commit 209<\/li>\r\n<li>Going Back to a Previous Version 210<\/li>\r\n<li>Diff 211<\/li>\r\n<li>SVN in Delphi 212<\/li>\r\n<li>Subversion in the Cloud 215<\/li>\r\n<li>Further Learning 215<\/li>\r\n<\/ul>\r\n<\/li>\r\n<li>Git 215\r\n<ul>\r\n<li>Configuring Git 216<\/li>\r\n<li>Git Tutorial 216<\/li>\r\n<li>Some Other Handy Hints 218<\/li>\r\n<li>Further Learning 219<\/li>\r\n<\/ul>\r\n<\/li>\r\n<li>Bug \/ Issue \/ Ticket Tracking Systems 219<\/li>\r\n<\/ul>\r\n<\/li>\r\n<li>Working in Teams 219\r\n<ul>\r\n<li>What\u2019s the Bus Number for Your Project 220\r\n<ul>\r\n<li>Have a Successor 220<\/li>\r\n<\/ul>\r\n<\/li>\r\n<li>Getting Along in a Team 221<\/li>\r\n<li>Outsourcing 221<\/li>\r\n<li>Team Scalability 221<\/li>\r\n<li>Peer Review 222<\/li>\r\n<li>Pair Programming 222<\/li>\r\n<\/ul>\r\n<\/li>\r\n<li>Methodology, Process, and Project Management 223\r\n<ul>\r\n<li>Waterfall 223<\/li>\r\n<li>Agile 224\r\n<ul>\r\n<li>Sprints 226<\/li>\r\n<li>Team Size 226<\/li>\r\n<li>Stand-Ups 226<\/li>\r\n<li>Kanban Board 226<\/li>\r\n<li>Scrum 227<\/li>\r\n<li>Further Learning 227<\/li>\r\n<\/ul>\r\n<\/li>\r\n<li>Lean 228\r\n<ul>\r\n<li>Further Learning 228<\/li>\r\n<\/ul>\r\n<\/li>\r\n<li>DevOps 228\r\n<ul>\r\n<li>Infrastructure as Code 229<\/li>\r\n<li>Containerisation 229<\/li>\r\n<li>Continuous Integration 229<\/li>\r\n<li>Continuous Delivery 230<\/li>\r\n<li>Further Learning 230<\/li>\r\n<\/ul>\r\n<\/li>\r\n<\/ul>\r\n<\/li>\r\n<li>Preparing for Disaster 230\r\n<ul>\r\n<li>Backups 231<\/li>\r\n<li>Virtual Machines 233<\/li>\r\n<li>What if Something Happens to You 233<\/li>\r\n<li>Other Options 233<\/li>\r\n<li>Zombie Apocalypse 233<\/li>\r\n<li>Further Learning 234<\/li>\r\n<\/ul>\r\n<\/li>\r\n<li>finalization 234<\/li>\r\n<li>end. 235<\/li>\r\n<\/ul>"}],
"keywords":[
]}