{
"id":136,
"guid":"CA8AAB38920C483DB2E51457E4F9F604",
"pagename":"Delphi-in-all-its-glory.html",
"datalevel":9,
"dataversion":1,
"name":"Delphi in all its glory (part 1)",
"lang":"en",
"pubdate":"20230329",
"isbn13":"9798387412141",
"website":"https:\/\/gabrielmoraru.com\/publications-citations\/delphi-in-all-its-glory-book-1\/",
"authors":[
{
"id":51,
"guid":"A08AFCB8DA18EE118C5C32A5A9F17050",
"pagename":"Gabriel-Moraru.html",
"datalevel":7,
"dataversion":1}],
"publishers":[
],
"descriptions":[
{
"guid":"CD419D301AAF4E57A195B3D122F12932",
"pagename":"",
"datalevel":4,
"dataversion":1,
"lang":"en",
"text":"<p>This book is hands-on, pragmatic, and focused on solving real-world issues.<br\/><br\/>We\u2019ll begin with a gentle introduction to Delphi for newcomers. You will learn what Delphi is, why it excels at GUIs, and how its free license can get you started. We\u2019ll also touch on its darker history \u2014 how Micro$oft nearly brought Delphi down.<br\/><br\/>Next, we\u2019ll dissect the anatomy of a Delphi project to build our first application. From there, we\u2019ll take a quick tour of the IDE before diving into the Delphi language itself.<br\/><br\/>We\u2019ll then explore object-oriented programming concepts, including classes, constructors, safe memory management, inheritance, polymorphism, and safe typecasting. You will also learn about visual components and their powerful published properties.<br\/><br\/>For the adventurous, we\u2019ll delve into advanced abstractions, class methods, class fields, and class constructors. Along the way, we\u2019ll discover what is safe to do in Delphi, what isn\u2019t, and\u2014most importantly\u2014why.&nbsp;<\/p>"}],
"tocs":[
{
"guid":"884ABB5E68994E3CAD5FD84EC27A87A8",
"pagename":"",
"datalevel":5,
"dataversion":1,
"lang":"en",
"text":"<p>1. Overview<\/p><p>Intended Audience 3<br\/>What is Delphi? 4<br\/>Book layout 4<br\/>Always focused on code-safety 5<br\/>How is this book written? 5<br\/>Environment-responsible 6<br\/>Who am I? 6<br\/>Pre-requisites for this book 7<br\/>Let\u2019s start 7<\/p><p>2. Table of content<\/p><p>Symbols and conventions 17<\/p><p>3. What is Delphi?<\/p><p>Delphi is RAD 19<br\/>Delphi is general-purpose 19<br\/>Delphi has deep roots 20<br\/>Delphi = GUI 21<br\/>What is the VCL? 23<br\/>What is RAD Studio? 24<br\/>An IDE with multiple personalities. How does it work? 24<br\/>A complete IDE 26<br\/>Mature and polished 26<br\/>But, it must be expensive\u2026 right? 27<br\/>What can we build right out of the box, with Delphi? 29<br\/>Advantages of Delphi applications 31<br\/>Where can we use Delphi? 34<br\/>Where can\u2019t we use Delphi? 34<br\/>Delphi\u2019s productivity 34<br\/>Famous programs built with Delphi 35<br\/>Summary 36<\/p><p>4. Delphi today<\/p><p>Popularity 38<br\/>About Evil, Darth Vader and\u2026 Bill Gates 38<br\/>Availability of libraries 39<br\/>A brighter future 41<br\/>Tiobe Index 42<br\/>Summary 44<\/p><p>5. An overview of the Delphi language<\/p><p>Clarity 45<br\/>A strongly typed language 46<br\/>Well designed 46<br\/>One string to rule them all 46<br\/>Not open-source 47<br\/>Fastest compiler 48<br\/>Finally! A compiler that is not snarky 48<br\/>No more pointers 50<br\/>ASM in the mix 51<br\/>Damn fast 51<br\/>What kind of applications can we build with Delphi? 52<br\/>Why building apps is so easy with Delphi? 53<br\/>Delphi is WYSIWYG 53<br\/>Quick mockups 53<br\/>The VCL framework 53<br\/>Low code \/ no code 54<br\/>Portable code 55<br\/>Native look 55<br\/>Ready for the future 56<br\/>The never-ending story 56<br\/>Summary 57<\/p><p>6. The Pascal dynasty<\/p><p>Lazarus \/ FPC 59<br\/>Migrating to Lazarus 59<br\/>Unitary framework 60<br\/>Platforms 61<br\/>Compatibility with Delphi 62<br\/>Speed 62<br\/>C++, Delphi\u2019s cousin 63<br\/>Delphi and C++ are binary \u201Ccompatible\u201D 63<br\/>Summary 63<br\/>The \u201CBurning Monkey\u201D 64<br\/>A bit of history 64<br\/>Firemoneky = VCL on steroids 65<br\/>Deploying our application on other platforms 67<\/p><p>7. Installing Delphi<\/p><p>Delphi version 70<br\/>Time 70<br\/>License key 70<br\/>ISO installer 70<br\/>The installation folder 71<br\/>Delphi version info 75<br\/>Updates 75<br\/>Delphi Silent Installer 76<br\/>We are done 76<\/p><p>8. Let\u2019s get started<\/p><p>Anatomy of a Delphi Project 78<br\/>Loading a Delphi project into the IDE 78<br\/>The DPR file 79<br\/>The Project Manager 81<br\/>The anatomy of a Delphi unit 84<br\/>The \u201CUnit\u201D section 84<br\/>The \u201CInterface\u201D and \u201CImplementation\u201D section 85<br\/>The chicken and the egg 87<br\/>The {$R} section 88<br\/>The \u201CInitialization\u201D and the \u201CFinalization\u201D section 88<br\/>Project Options 93<br\/>Compiler configurations 94<br\/>The Manifest file 96<br\/>Themes 97<br\/>The DProj: DPR\u2019s little brother 99<br\/>Project paths 100<\/p><p>9. IDE this\u2026 IDE that\u2026<\/p><p>The main menu 104<br\/>File 104<br\/>Edit 104<br\/>Search 104<br\/>Refactor 105<br\/>Run 105<br\/>GExperts and CnPack 105<br\/>Project 106<br\/>The main panes of the IDE 107<br\/>The Project Manager 107<br\/>The Component Palette 108<br\/>The Object Inspector 108<br\/>The Messages window 109<br\/>Form designer 109<br\/>The Code Editor 109<br\/>The Form Designer 112<br\/>Common IDE shortcuts 114<br\/>Run 114<br\/>Run (debug mode) 114<br\/>Show (IDE panes) 114<br\/>Search 114<br\/>Code Editor useful keyboard shortcuts 115<br\/>Customizing the IDE 116<br\/>Dual monitor 117<br\/>IDE Layouts 117<br\/>Third party IDE plugins for Delphi 118<br\/>DDevExtensions 118<br\/>CnPack 119<br\/>GExperts 123<br\/>Building our own plugins 124<br\/>Plugin management 125<\/p><p>10. Our first Delphi application<\/p><p>Smallest Delphi application 127<br\/>Let\u2019s start 129<br\/>Form = PAS + DFM 134<\/p><p>11. A crash course into the Delphi language<\/p><p>If you already know C++ 136<br\/>A typical piece of Delphi code 138<br\/>Comments 141<br\/>Variables 142<br\/>What is a variable? 142<br\/>What are data types? 142<br\/>Declaring variables 142<br\/>General naming conventions in Delphi 144<br\/>Naming variables 146<br\/>Global versus local variables 147<br\/>How do computers store numbers in their memory? 149<br\/>Assigning values to a variable 153<br\/>Variable initialization 155<br\/>Constants 160<br\/>Arithmetic operators 161<br\/>Data types 163<br\/>Primitive Data Types 163<br\/>Managed Data Types 173<br\/>Delphi is \u201Cstrong typed\u201D 197<br\/>Records 199<br\/>Assigning records 201<br\/>Field initialization 205<br\/>With 210<br\/>Displaying a message 212<br\/>If\/Then\/Else 214<br\/>Nesting conditions 214<br\/>Case 217<br\/>Casey\u2019s Coding Conundrum 217<br\/>The Quest for Enumerations 217<br\/>For loops 220<br\/>While 226<br\/>Repeat\/Until 227<br\/>Routines 228<br\/>Compartmentalizing your code 228<br\/>Reusing the code 229<br\/>Procedures 231<br\/>Functions 233<br\/>Good practice 239<br\/>Statement separator 239<br\/>How does a computer program work? 240<br\/>Nested routines 241<br\/>Function overloading 242<br\/>Parameters of a routine 243<br\/>Not all parameters are created equal 246<br\/>Code analysis 252<\/p><p>12. Classes and objects<\/p><p>Why objects? 258<br\/>An object 259<br\/>Objects vs classes 261<br\/>Naming conventions 261<br\/>Instantiation 262<br\/>Extensibility 262<br\/>Constructors 263<br\/>Let\u2019s build our own class 264<br\/>Inherited 265<br\/>Destructors 266<br\/>Try\/Finally 266<br\/>Super-duper important 268<br\/>Special cases 268<br\/>Fields 270<br\/>Properties 271<br\/>Read-only properties 274<br\/>Recap 274<br\/>Published properties 275<br\/>Default 276<br\/>Objects require manual memory management 277<br\/>Pointers 284<br\/>Typed vs untyped pointers 284<br\/>Dereferencing a pointer 285<br\/>Assigning pointers 287<br\/>References 291<br\/>Dangling references 293<br\/>Assigning an object to another object 298<br\/>Objects \u2013 A real world example 299<br\/>Inheritance, polymorphism, and typecasting 301<br\/>The inheritance chain 301<br\/>Typecasting 303<br\/>The hard typecast 306<br\/>The \u2018as\u2019 typecast 306<br\/>The \u2018is\u2019 operator 307<br\/>Invalid typecasts 308<br\/>More invalid typecasts 309<br\/>RTTI alternative 311<br\/>Methods 313<br\/>Method binding 313<br\/>Speed 314<br\/>Static methods 314<br\/>Overriding methods \/ Polymorphic behavior 316<br\/>Polymorphism 319<br\/>Hiding vs overriding 323<br\/>VMT 325<br\/>Overloading methods 326<br\/>Declaring multiple constructors with different parameters 331<br\/>Keywords recap 334<br\/>Recap for polymorphism 334<br\/>Methods \u2013 Advanced topics 335<br\/>Class methods 335<br\/>Concrete example 335<br\/>Let\u2019s write a better example 337<br\/>Class fields 338<br\/>Putting class fields to a good use \u2013 Singleton class 340<br\/>Using it for real 341<br\/>Predefined class methods in TObject 342<br\/>Abstract methods 344<br\/>Abstract classes 348<br\/>Generics 349<br\/>Creating a generic class 351<\/p><p>13. Forms<\/p><p>PAS + DFM = Form 355<br\/>Auto-created forms 357<br\/>The main form 358<br\/>Secondary forms 359<br\/>Stay on top 363<br\/>An application without forms 364<br\/>The \u201CApplication\u201D object 366<br\/>Showing a new created form 367<br\/>The owner of a form 368<br\/>Application as owner 368<br\/>Form as owner 368<br\/>Nil as owner (no owner) 368<br\/>Initialization of a program 369<br\/>Closing a form 374<br\/>Several ways to close a form 376<br\/>Release versus Close 379<br\/>Experimenting with Free, Close and Release 380<br\/>About GUI Applications 386<br\/>So, why do we need GUIs? 386<br\/>Let there be mockups! 395<br\/>Save GUI state to file 399<br\/>Summary 399<\/p><p>14. Visual components<\/p><p>Ownership 402<br\/>Parenting 403<br\/>Parenting and modularization 405<br\/>Ownership vs Parenting 406<br\/>Recap 407<br\/>Properties of a component 408<br\/>Events and event handlers 410<br\/>Understanding events 410<br\/>Some examples 412<br\/>Event handlers are just properties 415<br\/>The ubiquitous Sender parameter 416<br\/>Building our own visual components 419<br\/>Most used visual components 420<br\/>TLabel 420<br\/>TButton 420<br\/>TPanel 421<br\/>TRadioButton 421<br\/>TCheckBox 421<br\/>TImage 422<br\/>TEdit 422<br\/>TMemo 423<br\/>TRichEdit 423<br\/>TSpinEdit 424<br\/>TTimer 424<br\/>More visual components 425<br\/>TTrayIcon 425<br\/>TFlowPanel 429<br\/>TGridPanel 431<br\/>Actions \/ TActionList 434<br\/>TActionManager 445<br\/>Customizable toolbars 446<\/p><p>15. Databases<\/p><p>FireDAC 453<\/p><p>16. All good things must come to an end<\/p><p>What I have learned in the last 25 years of software development 457<br\/>Where do you go from here? 462<br\/>Delphi sample projects 462<br\/>Your next big project could be a game 463<br\/>About Stack Overflow 463<br\/>Ask the artificial intelligence 465<br\/>Video tutorials 469<br\/>Delphi books 469<br\/>My books 471<br\/>Already published books 471<br\/>Next books 471<br\/>Notes and credits 473<br\/>Appendix 474<br\/>Files generated by Delphi 474<br\/>Example of ASM code in PAS file: 475<br\/>Delphi releases 476<br\/>What\u2019s new since Delphi 10.0? 477&nbsp;<\/p>"}],
"keywords":[
]}