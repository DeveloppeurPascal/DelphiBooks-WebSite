{
"id":58,
"url":"",
"guid":"4482FCB8DA18EE118C5C32A5A9F17050",
"pagename":"Delphi-memory-management-for-classic-and-ARC-compilers.html",
"datalevel":8,
"dataversion":1,
"ispagetobuild":true,
"name":"Delphi memory management for classic and ARC compilers",
"lang":"en",
"pubdate":"20180624",
"thumb":"",
"isbn10":"1721654909",
"isbn13":"9781721654901",
"website":"https:\/\/dalija.prasnikar.info\/delphimm\/index.html",
"cover":"",
"cover_100w":"",
"cover_150w":"",
"cover_200w":"",
"cover_300w":"",
"cover_400w":"",
"cover_500w":"",
"cover_100h":"",
"cover_200h":"",
"cover_300h":"",
"cover_400h":"",
"cover_500h":"",
"cover_100x100":"",
"cover_200x200":"",
"cover_300x300":"",
"cover_400x400":"",
"cover_500x500":"",
"cover_130x110":"",
"authors":[
{
"id":48,
"url":"",
"guid":"EA81FCB8DA18EE118C5C32A5A9F17050",
"pagename":"Dalija-Prasnikar.html",
"datalevel":6,
"dataversion":1,
"ispagetobuild":true,
"name":""
},{

"id":49,
"url":"",
"guid":"4883FCB8DA18EE118C5C32A5A9F17050",
"pagename":"Prasnikar-Neven-Jr.html",
"datalevel":6,
"dataversion":1,
"ispagetobuild":true,
"name":""}],
"publishers":[
{
"id":7,
"url":"",
"guid":"682BFDB8DA18EE118C5C32A5A9F17050",
"pagename":"Amazon-Kindle.html",
"datalevel":4,
"dataversion":1,
"ispagetobuild":true,
"label":"Amazon"}],
"descriptions":[
{
"guid":"D082FCB8DA18EE118C5C32A5A9F17050",
"pagename":"",
"datalevel":3,
"dataversion":1,
"ispagetobuild":true,
"lang":"en",
"text":"<P align=\"left\">Memory management. One of the most basic parts of software development, often kept on the side even though it has the most profound effect on how we write our code.<\/P>\n<P align=\"left\">Delphi provides a variety of types with their own memory management logic, as well as two sets of compilers that provide different memory management systems for classes.<\/P>\n<P align=\"left\"><B>* Classic Delphi compiler currently supported on Windows and OSX platforms - using manual memory management while providing ARC for certain types.<\/B><\/P>\n<P align=\"left\"><B>* Next generation ARC Delphi compiler supported on mobile Android and iOS platforms, as well as Linux - using full ARC - Automatic Reference Counting memory management system.<\/B><\/P>\n<P align=\"left\">Each memory management system has its good and bad sides. Each offers solutions to some problems, but creates a whole range of other problems. And each requires slightly different coding patterns and practices. Knowing the strengths and weaknesses and understanding how memory management system(s) work goes hand-in-hand with writing clean, bug-free and maintainable code.<\/P>\n<P align=\"left\"><B>Both compilers will be covered in detail, as well as coding patterns required for writing cross-compiler code that must run under both.<\/B><\/P>\n<P align=\"left\">From manual memory management, to garbage collection, different memory management systems differ not only by the general category they fall in, but also by implementation. And all those fine implementation details also have a great impact on actual code. From the perspective of the everyday software development process discussing memory management is impossible without discussing its specific implementation in specific languages and toolsets.<\/P>"}],
"tocs":[
],
"keywords":[
]}