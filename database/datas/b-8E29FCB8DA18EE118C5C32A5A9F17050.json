{
"id":19,
"url":"",
"guid":"8E29FCB8DA18EE118C5C32A5A9F17050",
"pagename":"DelphiMVCFramework.html",
"datalevel":8,
"dataversion":1,
"ispagetobuild":true,
"name":"DelphiMVCFramework",
"lang":"en",
"pubdate":"20200915",
"thumb":"",
"isbn10":"",
"isbn13":"9781312680906",
"website":"http:\/\/www.danieleteti.it\/post\/dmvcframework-the-official-guide-hardcopy\/",
"cover":"",
"cover_100w":"",
"cover_150w":"",
"cover_200w":"",
"cover_300w":"",
"cover_400w":"",
"cover_500w":"",
"cover_100h":"",
"cover_200h":"",
"cover_300h":"",
"cover_400h":"",
"cover_500h":"",
"cover_100x100":"",
"cover_200x200":"",
"cover_300x300":"",
"cover_400x400":"",
"cover_500x500":"",
"cover_130x110":"",
"authors":[
{
"id":6,
"url":"",
"guid":"000DFCB8DA18EE118C5C32A5A9F17050",
"pagename":"Daniele-Teti.html",
"datalevel":6,
"dataversion":1,
"ispagetobuild":true,
"name":""}],
"publishers":[
{
"id":6,
"url":"",
"guid":"9C24FDB8DA18EE118C5C32A5A9F17050",
"pagename":"Leanpub.html",
"datalevel":4,
"dataversion":1,
"ispagetobuild":true,
"label":"Leanpub"}],
"descriptions":[
{
"guid":"242AFCB8DA18EE118C5C32A5A9F17050",
"pagename":"",
"datalevel":3,
"dataversion":1,
"ispagetobuild":true,
"lang":"en",
"text":"DelphiMVCFramework is a solid and proven framework to build websolutions. If you ever think to build a distributed system, DelphiMVCFramework is one of the best choice you could do."}],
"tocs":[
{
"guid":"602AFCB8DA18EE118C5C32A5A9F17050",
"pagename":"",
"datalevel":3,
"dataversion":1,
"ispagetobuild":true,
"lang":"en",
"text":"Foreword\nWhat is the Delphi MVC Framework, and why does it matter?\nReviewers\nWhat users say about DMVCFramework\nFetching This Book\u2019s Code\nUsing This Book\u2019s Code\nBook Release Notes\nChapter 1: Getting Started with DelphiMVCFramework\nWhat you\u2019ll learn\nDMVCFramework is \u201Cbatteries included\u201D\nInstallation of DelphiMVCFramework 3.2.1-carbon\nYour first RESTful server with DelphiMVCFramework\nYour first DMVCFramework-style \u201CHello World\u201D\nBuilt-in System Actions\nWhat\u2019s Next\nChapter 2: Controllers and routing\nThe Router\nMVCPath attribute\nHandling Parameters\nQuery-String parameters\nURL mapped parameters\nMultiple Paths for a Single Action\nMore about URL Mapped parameters\nStrongly Typed Actions\nMVCHTTPMethod attribute\nMVCProduces attribute\nMVCConsumes attribute\nMVCDoc attribute\nAction Filters\nWhat\u2019s Next\nChapter 3: Renders\nWhat you\u2019ll learn\nThe Rendering Phase\nRendering Data Must be Simple!\nRendering Objects and List of Objects\nCustomize Objects Serialization\nRendering TStream descendants\nRendering Nested Objects\nSerializing TDataset descendants\nRendering Dictionaries\nRendering images, pdf and other binary contents\nRendering Exceptions\nRendering Custom Data Structures\nSupport HATEOAS in your APIs\nDeserialization\nDeserialize Simple Objects\nDeserializing List of Object\nDeserializing Hierarchical Structures\nThe IMVCList Interface\nSending Binary Contents\nUsing multipart\/form-data\nCustom Type Serializers\nUsing custom serializer\nWhat\u2019s Next\nChapter 4: Municipal Library System - The Database\nWhat you\u2019ll learn\nThe Municipal Library System\nThe Database\nWhat\u2019s Next\nChapter 5: Municipal Library System - The APIs\nWhat you\u2019ll learn\nAPIs design Overview\nDesign an API for the Books Lending System\nThe actual APIs\nWhat\u2019s next\nChapter 6: Municipal Library System - Creating APIs using Datasets\nWhat you\u2019ll learn\nThe CRUD acronym\nImplementing the API using datasets\nWhat\u2019s Next\nChapter 7: Municipal Library System - Creating APIs with MVCActiveRecord\nWhat you\u2019ll learn\nThe ActiveRecord Design Pattern\nActiveRecord in MVCFramework a.k.a. MVCActiveRecord\nWhat\u2019s Next\nChapter 8: Municipal Library System - Complete APIs with MVCActiveRecord\nWhat you\u2019ll learn\nWebModule Configuration\nEstablish a Database Connection\nTAuthorsController\nTControllerBase\nHandling pagination in TCustomersController.GetCustomers\nTerminate a lending\nUsers management with TUsersController\nWhat\u2019s Next\nChapter 9: Authentication & authorization\nWhat you\u2019ll learn\nAuthentication vs Authorization\nThe Authentication\/Authorization Subsystem\nSecuring an API\nHTTP Basic Authentication\nJSON Web Token Authentication and Authorization\nAccessing Logged User Information\nWhat\u2019s Next\nChapter 10: Middlewares\nWhat you\u2019ll learn\nWhat\u2019s a middleware?\nThe IMVCMiddleware Interface\nBuilt-In Middleware\nCORS Middleware\nCompression Middleware\nAnalytics Middleware\nTrace Middleware\nStatic Files Middleware\nWhat\u2019s Next\nChapter 11: Municipal Library System - Authentication and Authorization\nWhat you\u2019ll learn\nHow to choose an authentication schema\nDefining a roles system\nCreate a Python client\nWhat\u2019s Next\nChapter 12: JSON-RPC: why, when and how use it\nWhat you\u2019ll learn\nJSON-RPC Overview\nJSON-RPC 2.0 Requests\nJSON-RPC 2.0 Notifications\nResponse Error Object\nJSON-RPC vs REST\nPublishing PODOs\nThe MVCInheritable Attribute\nInspecting the published methods\nDefining Hooks\nWhat\u2019s Next\nChapter 13: Tips and Tricks\nTip #1: Redirecting users to a different URL only when are using browser\nTip #2: Don\u2019t load system controllers\nTip #3: Remove X-Powered-By Header\nTip #4: Change or remove the Server Header\nTip #5: Testing API using Python\nTip #6: Storing users password"}],
"keywords":[
]}