{
"id":84,
"url":"",
"guid":"30AFFCB8DA18EE118C5C32A5A9F17050",
"pagename":"Delphi-Event-based-and-Asynchronous-Programming.html",
"datalevel":8,
"dataversion":1,
"ispagetobuild":true,
"name":"Delphi Event-based and Asynchronous Programming",
"lang":"en",
"pubdate":"20201228",
"thumb":"",
"isbn10":"",
"isbn13":"",
"website":"https:\/\/dalijap.blogspot.com\/2020\/11\/just-released-ebook-delphi-event-based.html",
"cover":"",
"cover_100w":"",
"cover_150w":"",
"cover_200w":"",
"cover_300w":"",
"cover_400w":"",
"cover_500w":"",
"cover_100h":"",
"cover_200h":"",
"cover_300h":"",
"cover_400h":"",
"cover_500h":"",
"cover_100x100":"",
"cover_200x200":"",
"cover_300x300":"",
"cover_400x400":"",
"cover_500x500":"",
"cover_130x110":"",
"authors":[
{
"id":48,
"url":"",
"guid":"EA81FCB8DA18EE118C5C32A5A9F17050",
"pagename":"Dalija-Prasnikar.html",
"datalevel":6,
"dataversion":1,
"ispagetobuild":true,
"name":""
},{

"id":49,
"url":"",
"guid":"4883FCB8DA18EE118C5C32A5A9F17050",
"pagename":"Prasnikar-Neven-Jr.html",
"datalevel":6,
"dataversion":1,
"ispagetobuild":true,
"name":""}],
"publishers":[
],
"descriptions":[
{
"guid":"94AFFCB8DA18EE118C5C32A5A9F17050",
"pagename":"",
"datalevel":3,
"dataversion":1,
"ispagetobuild":true,
"lang":"en",
"text":"<p>Event-based programming is everywhere. Nowadays, you can hardly write any kind of application without leaning on events and messages.<\/p>\n<p>This simple, yet extremely powerful mechanism is also the cornerstone of asynchronous and multithreaded programming. Without events, we would not know when some task was completed.<\/p>\n<p>But, asynchronous and multithreaded programming consists of more than just handling multiple threads, protecting shared resources, and synchronization. It also includes designing and understanding program flow. That design aspect is often forgotten, taken for granted, and solving all the fine-grained nuances of multithreaded programming hogs the spotlight.<\/p>\n<p>Without understanding asynchronous flow and the bigger picture it can be hard to properly solve all the other issues, including multithreading. What used to be plain spaghetti code, now becomes temporal spaghetti.<\/p>\n<p>You can lose control over your objects, have bits of code creating and releasing them all over the place, even without adding multithreading into the mix. Memory leaks, crashes, and holding references to dead data long after its destruction are perfectly possible even in a singlethreaded environment.<\/p>\n<p>While the starting point of this book is giving a proper introduction to event-based and asynchronous programming flow and design, it also provides the necessary implementation details, explanations and code examples needed to put those designs into practice.<\/p>"}],
"tocs":[
{
"guid":"BCAFFCB8DA18EE118C5C32A5A9F17050",
"pagename":"",
"datalevel":3,
"dataversion":1,
"ispagetobuild":true,
"lang":"en",
"text":"Part I. - Sections 1-4\nIntroduction\n\n1. The Loop\n\nHidden complexity\nPeeking at the console\nMain event loop\nEvent-based programming\nPushmi-pullyu\nGame loop\n2. Messaging Systems\n\nWindows messaging system\nWindows messaging system in VCL\nCustom messaging systems and patterns\nSystem.Messaging\n3. Life, the Universe, and Everything\n\nLife, the Universe, and Everything\nAutomatic memory management\nInterfaces\nClass helpers\nAnonymous methods and lambdas\n4. Asynchronous Programming and Multithreading\n\nAsynchronous programming and multithreading\nMaking the first dive...\nApplication.ProcessMessages\nApplication.ProcessMessages reentrancy problem\nMoving long operations to a background thread\nAsynchronous message dialog\nTasks\nFutures\nComing in Part II. on December 11, 2020\nPart II. - Sections 5 & 6\n5. Thread Safety\n\nWhat is thread safety anyway?\nThe importance of thread safety\nAchieving thread safety\nAvoiding shared data\nProtecting shared data\n6. GUI and Multithreading\n\nMain (GUI) thread\nCommunicating with the main thread\n..."}],
"keywords":[
]}